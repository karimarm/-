Роль: ты — студент с продвинутыми навыками написания курсовых и дипломных работ, который разрабатывает программу для обработки библиографических списков и пишет по ней курсовую работу. 
Твоя задача: генерировать текст для курсовой работы на основе разрабатываемого проекта и запроса пользователя. Текст должен быть уникальным и не определяться как ИИ
Проект: программного обеспечения обработки библиографических списков. Программа умеет распознавать авторов, название, год и т. д. по введенному списку книг, статей, журналов, интернет-источников и других видов библиографических ссылок.
Источники могут быть введены как на русском, так и на английском языке. Программа умеет обрабатывать библиографические ссылки по стандарту ГОСТ.
Также в программе есть функция проверки соответствия библиографического списка различным критериям, например, не менее определенного количества или процента от общего количества источников на английском языке, не менее определенного количества или процента от общего количества источников свежее заданного года, не менее определенного количества или процента от общего количества источников ВАК, РИНЦ и т.п., не более определенного количества или процента от общего количества источников определенного автора и др. Количество или процент от общего количества источников вводится пользователем.
Также в программе есть функция ввода библиографической ссылки путем ввода пользователем её данных, таких как авторы, название, дата и др.

# Техническое задание
## на разработку программного обеспечения для обработки библиографических списков

## 1. Общие сведения

### 1.1. Наименование программы
Программное обеспечение для обработки библиографических списков "БиблиоАналитика"

### 1.2. Назначение и цели создания программы
Программа предназначена для автоматизации работы с библиографическими списками, включая распознавание элементов библиографических ссылок и проверку соответствия списка различным критериям.

**Основные цели создания программы:**
- Упрощение работы с библиографическими списками для студентов и научных сотрудников
- Анализ библиографического списка на соответствие заданным критериям

### 1.3. Целевая аудитория
Студенты и научные сотрудники, работающие над авторскими научными работами, которые требуют оформления библиографических списков.

## 2. Требования к программе

### 2.1. Требования к функциональным характеристикам

#### 2.1.1. Основные функции

**1. Распознавание элементов библиографических ссылок**
- Автоматическое распознавание авторов, названия, года издания, издательства и других элементов из введенного текста библиографической ссылки
- Поддержка распознавания ссылок на русском и английском языках
- Поддержка распознавания различных типов источников: книги, статьи, журналы, интернет-источники и т.д.
- Обязательная поддержка распознавания ссылок в формате ГОСТ и IEEE

**2. Проверка соответствия библиографического списка критериям**
- Проверка на наличие не менее определенного количества или процента от общего количества источников на английском языке
- Проверка на наличие не менее определенного количества или процента от общего количества источников свежее заданного года
- Проверка на наличие не менее определенного количества или процента от общего количества источников ВАК, РИНЦ и т.п.
- Проверка на наличие не более определенного количества или процента от общего количества источников определенного автора
- Возможность для пользователя задавать пороговые значения количества или процента источников для каждого критерия

**3. Ввод библиографических ссылок**
- Ручной ввод данных библиографической ссылки (авторы, название, дата и т.д.) через специальную форму
- Загрузка библиографического списка из файлов форматов .docx и .pdf
- Возможность прямого текстового ввода библиографических ссылок

#### 2.1.2. Дополнительные требования
- Возможность редактирования распознанных элементов библиографических ссылок
- Возможность объединения нескольких библиографических списков

### 2.2. Требования к техническому обеспечению

**1. Платформа реализации**
- Операционная система: Windows
- Язык программирования: Python 3

**2. Требования к аппаратному обеспечению**
- Процессор: не ниже Intel Core i3 или аналогичный
- Оперативная память: не менее 4 ГБ
- Свободное место на жестком диске: не менее 500 МБ

**3. Требования к программному обеспечению**
- Операционная система: Windows 10 и выше
- Наличие установленного Microsoft Office (для полной поддержки .docx файлов) или совместимого программного обеспечения

### 2.3. Требования к интерфейсу пользователя

**1. Общие требования**
- Интуитивно понятный и эргономичный интерфейс
- Наличие справочной системы и подсказок

**2. Структура интерфейса**
- Главное окно с основными функциями программы
- Отдельные вкладки или разделы для разных функций (распознавание, проверка критериев, ввод)
- Область отображения текущего библиографического списка
- Панель инструментов с основными действиями

**3. Элементы управления**
- Кнопки для основных действий
- Поля ввода для текстовой информации
- Выпадающие списки для выбора критериев
- Чекбоксы для выбора опций
- Поля для задания числовых параметров проверки критериев

## 3. Требования к входным и выходным данным

### 3.1. Входные данные

**1. Текстовый ввод библиографических ссылок**
- Формат: текст
- Языки: русский, английский
- Стандарты: ГОСТ

**2. Файлы с библиографическими списками**
- Форматы: .docx, .pdf
- Структура: произвольная, содержащая библиографические ссылки

**3. Параметры для проверки соответствия критериям**
- Количество или процент источников на английском языке
- Количество или процент источников свежее заданного года
- Количество или процент источников ВАК, РИНЦ
- Количество или процент источников определенного автора
- Другие пользовательские критерии

### 3.2. Выходные данные

**1. Результаты проверки соответствия критериям**
- Отчет о соответствии/несоответствии каждому заданному критерию
- Статистика по библиографическому списку

## 4. Требования к программной документации

**1. Руководство пользователя**
- Описание интерфейса и функций программы
- Инструкции по работе с программой
- Примеры использования

**2. Техническая документация**
- Описание архитектуры программы
- Описание алгоритмов распознавания и обработки библиографических ссылок
- Инструкция по установке и настройке программы



# Структура проекта 

## 1. Архитектура приложения

Проект "БиблиоАналитика" реализован по архитектурному паттерну **Model-View-Controller (MVC)**, который обеспечивает четкое разделение кода на три компонента:

1. **Model (Модель)** - содержит данные и бизнес-логику
2. **View (Представление)** - отвечает за пользовательский интерфейс
3. **Controller (Контроллер)** - обрабатывает взаимодействие между моделью и представлением

Приложение построено как настольное графическое приложение с использованием **PyQt5** для создания пользовательского интерфейса.

## 2. Структура каталогов

Проект имеет следующую физическую структуру каталогов:

БиблиоАналитика/
│
├── main.py                     # Точка входа в приложение
├── requirements.txt            # Зависимости проекта
├── README.md                   # Документация проекта
├── IDEF0_Diagram.md            # Диаграмма IDEF0
├── Technical_Specification.md  # Техническое задание
│
├── models/                     # Модели данных
│   ├── __init__.py
│   ├── app_model.py            # Основная модель приложения
│   └── bibliography_item.py    # Модель библиографической записи
│
├── views/                      # Представления
│   ├── __init__.py
│   ├── main_window.py          # Главное окно приложения
│   ├── input_tab.py            # Вкладка ввода и редактирования
│   └── criteria_tab.py         # Вкладка проверки критериев
│
├── controllers/                # Контроллеры
│   ├── __init__.py
│   ├── main_controller.py      # Основной контроллер
│   ├── input_controller.py     # Контроллер ввода данных
│   └── criteria_controller.py  # Контроллер проверки критериев
│
└── utils/                      # Вспомогательные модули
    ├── __init__.py
    ├── reference_parser.py     # Парсер библиографических ссылок
    ├── file_utils.py           # Утилиты для работы с файлами
    └── reference_formatter.py  # Форматирование библиографических ссылок
    └── reference_formatter.py  # Форматирование библиографических ссылок

## 3. Основные компоненты и их взаимодействие

### 3.1. Точка входа - main.py

Файл `main.py` является точкой входа в приложение. Он:
- Инициализирует приложение PyQt5
- Создает экземпляры основных компонентов (модель, представление, контроллер)
- Запускает главное окно и основной цикл событий

### 3.2. Модели (models/)

#### AppModel (app_model.py)
- Центральная модель данных приложения
- Управляет библиографическим списком
- Хранит критерии проверки
- Поддерживает историю изменений (для функции отмены)
- Предоставляет интерфейс для добавления, удаления и управления записями

#### BibliographyItem (bibliography_item.py)
- Представляет одну библиографическую запись
- Хранит все составляющие элементы (авторы, название, год и т.д.)
- Поддерживает различные типы записей (книга, статья, веб-ресурс)
- Содержит методы для преобразования и форматирования записи

### 3.3. Представления (views/)

#### MainWindow (main_window.py)
- Главное окно приложения
- Управляет системой вкладок
- Содержит главное меню и строку состояния
- Отправляет сигналы контроллеру при действиях пользователя

#### InputTab (input_tab.py)
- Вкладка для ввода и редактирования библиографических записей
- Содержит формы для ручного и структурированного ввода
- Отображает список существующих записей
- Предоставляет интерфейс для редактирования элементов

#### CriteriaTab (criteria_tab.py)
- Вкладка для настройки и проверки критериев
- Позволяет установить требования к библиографическому списку
- Отображает результаты проверки и статистику
- Содержит элементы управления для настройки критериев

### 3.4. Контроллеры (controllers/)

#### MainController (main_controller.py)
- Главный контроллер приложения
- Инициализирует все другие контроллеры
- Управляет импортом/экспортом библиографических списков
- Обрабатывает общие команды (отмена действия, сохранение и т.д.)

#### InputController (input_controller.py)
- Контроллер для вкладки ввода и редактирования
- Обрабатывает добавление и редактирование записей
- Связывает модель и представление для этой вкладки
- Инициирует распознавание библиографических ссылок

#### CriteriaController (criteria_controller.py)
- Контроллер для вкладки проверки критериев
- Проверяет соответствие списка заданным критериям
- Рассчитывает статистику по библиографическому списку
- Связывает модель и представление для этой вкладки

### 3.5. Утилиты (utils/)

#### ReferenceParser (reference_parser.py)
- Парсер библиографических ссылок
- Распознает элементы ссылок из текста
- Поддерживает различные форматы (ГОСТ, IEEE)
- Использует регулярные выражения для распознавания

#### FileUtils (file_utils.py)
- Функции для работы с файлами различных форматов
- Импорт из DOCX, PDF, TXT
- Экспорт в DOCX, TXT
- Управление кодировками и форматами

#### ReferenceFormatter (reference_formatter.py)
- Форматирование библиографических ссылок
- Преобразование между различными стандартами
- Генерация правильно отформатированных ссылок

## 4. Ключевые функциональные возможности

1. **Ввод и распознавание библиографических ссылок**
   - Ручной ввод
   - Импорт из файлов (DOCX, PDF, TXT)
   - Автоматическое распознавание элементов ссылки
   - Структурированный ввод через форму

2. **Проверка соответствия критериям**
   - Анализ процента англоязычных источников
   - Проверка актуальности (по годам)
   - Контроль источников ВАК и РИНЦ
   - Анализ распределения источников по авторам
   - Формирование отчетов о соответствии

3. **Управление библиографическими записями**
   - Добавление, редактирование, удаление
   - История изменений с возможностью отмены
   - Визуализация списка и отдельных записей

4. **Экспорт и форматирование**
   - Экспорт в различные форматы файлов
   - Форматирование по стандартам (ГОСТ, IEEE)

## 5. Технологический стек

- **Язык программирования**: Python 3.8+
- **GUI-фреймворк**: PyQt5
- **Обработка документов**: python-docx, PyPDF2
- **Парсинг данных**: регулярные выражения (re)
- **Работа с сетью**: requests, BeautifulSoup4
- **Обработка HTML/XML**: lxml

## 6. Архитектурные особенности

1. **Сигнально-слотовая система связи** (из PyQt5) используется для коммуникации между компонентами, что обеспечивает слабую связность
2. **Инкапсуляция данных** в моделях через использование приватных атрибутов и свойств
3. **Разделение ответственности** - каждый класс имеет четко определенную зону ответственности
4. **Модульность** - компоненты могут быть легко заменены или расширены
5. **Многоуровневая архитектура**, где каждый уровень (модель, представление, контроллер) взаимодействует только со смежными уровнями

Проект "БиблиоАналитика" представляет собой хорошо структурированное приложение, разработанное по принципам чистой архитектуры, где каждый компонент отвечает за свою функциональность, что обеспечивает высокую поддерживаемость и расширяемость кода.
